#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include"Stack.h"

void PrintArr(int*a,int n)
{
	int i = 0;
	for (i = 0; i < n; i++)
	{
		printf("%d ", a[i]);
	}
	printf("\n");
}
int PartSort1(int*a ,int left,int right)
{
	/*int index = GetMidIndex(a, left, right);
	Swap(&a[left], a[index]);*/

	int begin = left, end = right;
	//int begin = 0, end = n-1;
	int key = a[begin];
	int pivot = begin;
	while (begin<end)
	{
		//右边找小，放到左边
		while (begin<end&&a[end] > key)
		{
			end--;
		}
		//小的放到左边的坑里，自己形成新的坑位
		a[pivot] = a[end];
		pivot = end;
		//左边找大，放到右边
		while (begin<end&&a[begin] < key)
		{
			begin++;
		}
		//大的放到右边的坑里，自己形成新的坑位
		a[pivot] = a[begin];
		pivot = begin;
		//把key放到正确的位置
		if (begin == end)
		{
			pivot = begin;
			a[pivot] = key;
		}
	}
	return pivot;
}
void QuickSortNonR(int*a, int n)
{
	ST st;
	StackInit(&st);
	StackPush(&st, n - 1);
	StackPush(&st, 0);
	
	//只要有区间就入栈，栈空说明有序，右边区间先入栈
	while (!StackEmpty(&st))
	{
		int left = StackTop(&st);
		StackPop(&st);
		int right = StackTop(&st);
		StackPop(&st);
		
		int Index = PartSort1(a, left, right);
		//[left,Index-1]Index[Index+1,right]
		if (Index + 1 < right)
		{
			StackPush(&st, right);
			StackPush(&st, Index + 1);
		}
		if (left < Index - 1)
		{
			StackPush(&st, Index-1);
			StackPush(&st, left);
		}
	}
	StackDestroy(&st);
}

void QuickSortTest()
{
	int a[] = { 3, 7, 8, 6, 5, 1, 2, 9, 0, 4 };
	int size = sizeof a / sizeof(int);
	QuickSortNonR(a, size);
	PrintArr(a, size);
}
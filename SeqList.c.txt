#define _CRT_SECURE_NO_WARNINGS 1
#include"SeqList.h"

void SeqListInit(SL* ps)
{
	ps->a = NULL;
	ps->size = 0;
	ps->capacity = 0;
}
void SeqListPrint(SL* ps)
{
	for (int i = 0; i < ps->size; i++)
	{
		printf("%d ", ps->a[i]);
	}
	printf("\n");
}
void SeqListCheckCapacity(SL*ps)
{
	//判断空间是否足够或者是否为空
	if (ps->size == ps->capacity)
	{
		int newcapacity = ps->capacity == 0 ? 4 : ps->capacity * 2;
		SLDataType* tmp = (SLDataType)realloc(ps->a, newcapacity*sizeof(SLDataType));
		//扩容失败
		if (tmp == NULL)
		{
			printf("realloc fail\n");
			exit(-1);
		}
		//扩容成功
		ps->a = tmp;
		ps->capacity = newcapacity;
	}
}
//尾插法
void SeqListPushBack(SL* ps, SLDataType x)
{
	/*SeqListCheckCapacity(ps);
	ps->a[ps->size] = x;
	ps->size++;*/
	SeqListInsert(ps, ps->size, x);
}
//尾删法
void SeqListPopBack(SL* ps)
{
	//assert(ps->size > 0);
	//ps->size--;
	SeqListErase(ps, ps->size - 1);
}
//头插法
void SeqListPushFront(SL* ps, SLDataType x)
{
	/*SeqListCheckCapacity(ps);

	int lenth = ps->size-1;
	while (lenth>=0)
	{
		ps->a[lenth+1] = ps->a[lenth];
		lenth--;
	}
	ps->a[0] = x;
	ps->size++;*/
	SeqListInsert(ps, 0, x);
}
//头删
void SeqListPopFront(SL* ps)
{
	/*assert(ps->size > 0);

	int begin = 1;
	while (begin < ps->size)
	{
		ps->a[begin - 1] = ps->a[begin];
		begin++;  
	}
	ps->size--;*/
	SeqListErase(ps, 0);
}
//查找
int SeqListSearch(SL* ps,int x)
{
	int i = 0;
	for (i = 0; i < ps->size; i++)
	{
		if (ps->a[i] == x)
		{
			return i;
		}
	}
	return -1;
}
//指定pos下标插入
void SeqListInsert(SL* ps, int pos, SLDataType x)
{
	//if (pos>ps->size || pos < 0)
	//{
	//	printf("pos invalid\n");
	//	return;
	//}
	assert(pos >= 0 && pos <= ps->size);
	SeqListCheckCapacity(ps);
	int end = ps->size - 1;
	while (end >= pos)
	{
		ps->a[end + 1] = ps->a[end];
		end--;
	}
	ps->a[pos] = x;
	ps->size++;
}
//指定pos下标删除
void SeqListErase(SL* ps, int pos)
{
	assert(pos >= 0 && pos < ps->size);
	int begin = pos + 1;
	while (begin < ps->size)
	{
		ps->a[begin - 1] = ps->a[begin];
		begin++;
	}
	ps->size--;
}
void SeqListDestroy(SL* ps)
{
	free(ps->a);
	ps->a = NULL;
	ps->size = 0;
	ps->capacity = 0;
}
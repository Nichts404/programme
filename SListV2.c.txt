#define _CRT_SECURE_NO_WARNINGS 1

#include"SingleList.h"

//开辟新的节点
SLTNode* BuyListNode(SLTDataType x)
{
	SLTNode* newnode = (SLTNode*)malloc(sizeof(SLTNode));
	if (newnode == NULL)
	{
		printf("malloc failed\n");
		exit(-1);
	}
	newnode->data = x;
	newnode->next = NULL;
	return newnode;
}

void SListPrint(const SLTNode* phead)
{
	SLTNode* cur = phead;
	while (cur != NULL)
	{
		printf("%d->", cur->data);
		cur = cur->next;
	}
	printf("NULL\n");
}
//尾插法
//传参需要注意传指针的地址
void SListPushBack(SLTNode** pphead, SLTDataType x)
{
	assert(pphead);
	SLTNode* newnode = BuyListNode(x);
	if (*pphead == NULL)
	{
		*pphead = newnode;
	}
	else
	{
		SLTNode* tail = *pphead;
		//找到尾结点
		while (tail->next != NULL)
		{
			tail = tail->next;
		}
		//插入尾结点
		tail->next = newnode;
	}
}
//头插法
void SListPushFront(SLTNode** pphead, SLTDataType x)
{
	assert(pphead);
	SLTNode* newnode = BuyListNode(x);
	newnode->next = *pphead;
	*pphead = newnode;
}


//尾删法
void SlistPopBack(SLTNode** pphead)
{
	assert(pphead);
	//if (*pphead == NULL)
	//{
	//	return;
	//}
	assert(*pphead != NULL);//判断第一个节点是否为空
	if ((*pphead)->next == NULL)
	{
		free(*pphead);
		*pphead = NULL;
	}
	else
	{
		//SLTNode* prev = NULL;
		SLTNode* tail = *pphead;
		////while (tail->next != NULL)
		//while (tail->next)
		//{
		//	prev = tail;
		//	tail = tail->next;
		//}
		//free(tail);
		//tail = NULL;
		//prev->next = NULL;
		while (tail->next->next)
		{
			tail = tail->next;
		}
		free(tail->next);
		tail->next = NULL;
	}
}
//头删
void SlistPopFront(SLTNode** pphead)
{
	assert(pphead);
	//判断是否为空链表
	assert(*pphead != NULL);
	//先把plist->next的的地址存起来，再释放plist，最后还原plist->next的地址
	SLTNode* head = (*pphead)->next;
	free(*pphead);
	*pphead = head;
}
//找到pos位置的节点
SLTNode* SlistSearch(SLTNode* pphead,SLTDataType x)
{
	assert(pphead);
	SLTNode* cur = pphead;
	while (cur)
	{
		if (cur->data == x)
		{
			return cur;
		}
		else
		{
			cur = cur->next;
		}
	}
	return NULL;
}
//在pos之前插入一个节点
void SlistInsert(SLTNode** pphead, SLTNode* pos, SLTDataType x)
{
	assert(pphead);
	assert(pos);
	SLTNode* newnode = BuyListNode(x);
	//pos为第一个位置时单独考虑，采用头插法
	if (*pphead == pos)
	{
		SListPushFront(pphead, x);
	}
	else
	{
		//找到pos的前一个位置
		SLTNode* posPrev = *pphead;
		while (posPrev->next != pos)
		{
			posPrev = posPrev->next;
		}
		posPrev->next = newnode;
		newnode->next = pos;
	}
}
//在指定pos位置后面插入
void SlistInsertAfter(SLTNode* pos, SLTDataType x)
{
	assert(pos);
	SLTNode* newnode = BuyListNode(x);
	//SLTNode* posnext = pos->next;
	//pos->next = newnode;
	//newnode->next = posnext;
	newnode->next = pos->next;
	pos->next = newnode;
}
//在指定pos之前删除
void SlistErase(SLTNode** pphead,SLTNode* pos)
{
	assert(pphead);
	assert(pos);
	//判断pos位置是否为plist
	if (*pphead == pos)
	{
		SlistPopFront(pphead);
	}
	else
	{
		SLTNode* prev = *pphead;
		while (prev->next != pos)
		{
			prev = prev->next;
		}
		prev->next = pos->next;
		free(pos);
		pos = NULL;
	}
}
//在指定pos之后删除
void SlistEraseAfter(SLTNode* pos)
{
	assert(pos);
	assert(pos->next);
	SLTNode* next = pos->next;
	pos->next = next->next;
	free(next);
	next = NULL;
}
//销毁链表
void SlistDestroy(SLTNode** pphead)
{
	assert(pphead);
	SLTNode* cur = *pphead;
	while (cur)
	{
		SLTNode* next = cur->next;
		free(cur);
		cur = next;
	}
	*pphead = NULL;
}
#define _CRT_SECURE_NO_WARNINGS 1



#include<stdio.h>
#include<graphics.h>
#include<windows.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>


#define WEIGHT 640
#define HIGHT 480
#define SNAKE_NUM 500
#define SNAKE_R 5



//蛇的方向
enum DIR
{
	UP,
	DOWN,
	LEFT,
	RIGHT,
};


struct Snake
{
	int size;//蛇的节数
	int dir;//蛇的方向
	int speed;//蛇的速度
	POINT coor[SNAKE_NUM];//蛇的坐标
}snake;

struct Food
{
	int x;
	int y;
	int r;//食物大小
	bool flag;//食物是否被吃
	DWORD color;//食物颜色
	
}food;

void Initfood()
{
	food.x = rand() % WEIGHT + 1;
	food.y = rand() % HIGHT + 1;
	food.color = RGB(rand() % 256, rand() % 256, rand() % 256);
	food.r = 5;
	food.flag = true;
}
void Gameinit()
{
	//初始化图形窗口
	initgraph(WEIGHT, HIGHT);
	//设置随机数种子
	srand((unsigned int)time(NULL));
	//初始化蛇
	snake.size = 3;
	snake.speed = 10;
	snake.dir = RIGHT;
	int i = 0;
	for (i = 0; i <snake.size; i++)
	{
		snake.coor[i].x = 8 * SNAKE_R - 2 * SNAKE_R*i;
		snake.coor[i].y = 2 * SNAKE_R;
	}
	//初始化食物
	Initfood();
}

void Gamedraw()
{
	//双缓冲绘图
	BeginBatchDraw();
	//设置背景颜色
	setbkcolor(RGB(28, 115, 119));
	cleardevice();
	//绘制蛇
	setfillcolor(GREEN);
	int i = 0;
	for (i = 0; i < snake.size; i++)
	{
		solidcircle(snake.coor[i].x, snake.coor[i].y, SNAKE_R);
	}
	//绘制食物
	if (food.flag)
	{
		solidcircle(food.x, food.y, food.r);
	}
	EndBatchDraw();
}

//蛇移动实现
void snakemove()
{
	//移动时蛇头坐标发生改变
	int i = 0;
	for (i = snake.size-1; i >0; i--)
	{
		snake.coor[i] = snake.coor[i - 1];
	}
	switch (snake.dir)
	{
	case  UP:
		snake.coor[0].y-=snake.speed;//移动速度
		if (snake.coor[0].y + 2 * SNAKE_R <= 0) //穿墙功能实现
		{
			snake.coor[0].y = HIGHT;
		}
		break;
	case  DOWN:
		snake.coor[0].y+=snake.speed;
		if (snake.coor[0].y - 2 * SNAKE_R >= HIGHT)
		{
			snake.coor[0].y = 0;
		}
		break;
	case  LEFT:
		snake.coor[0].x-=snake.speed;
		if (snake.coor[0].x + 2 * SNAKE_R <= 0)
		{
			snake.coor[0].x = WEIGHT;
		}
		break;
	case  RIGHT:
		if (snake.coor[0].x - 2 * SNAKE_R >= WEIGHT)
		{
			snake.coor[0].x = 0;
		}
		snake.coor[0].x+=snake.speed;
		break;
	}
}
void Snakedie()
{
	for (int i = 1; i <= snake.size; i++)
	{
		if ((snake.coor[0].x == snake.coor[i].x) && (snake.coor[0].y == snake.coor[i].y))//是否碰到自身
		{
			while (1);
		}
	}
}

//通过按键改变方向
void keyControl()
{
	//判断有无按键
	if (_kbhit())
	{
		// UP 72 DOWN 80 LEFT 75 RIGHT 77 
		switch (_getch())
		{
		case 'w':
		case 'W':
		case 72:
			//改变方向并且限制反向移动
			if (snake.dir != DOWN)
			{
				snake.dir = UP;
			}
			break;
		case 's':
		case 'S':
		case 80:
			if (snake.dir != UP)
			{
				snake.dir = DOWN;
			}
			break;
		case 'a':
		case 'A':
		case 75:
			if (snake.dir != RIGHT)
			{
				snake.dir = LEFT;
			}
			break;
		case 'd':
		case 'D':
		case 77:
			if (snake.dir != LEFT)
			{
				snake.dir = RIGHT;
			}
			break;
			//暂停功能
		case ' ':
			while (1)
			{
				if (_getch() == ' ')
					return;
			}
			break;
		}
	}
}
//实现吃食物
void Eatfood()
{
	//判定范围
	if (food.flag&&snake.coor[0].x >= food.x-food.r&&snake.coor[0].x <= food.x+food.r&&
		snake.coor[0].y >= food.y-food.r&&snake.coor[0].y <= food.y+food.r)
	{
		food.flag = false;
		snake.size++;
	}
	//重新生成食物
	if (!food.flag)
	{
		Initfood();
	}
}


int main()
{
	Gameinit();
	while (1)
	{
		Gamedraw();
		snakemove();
		Snakedie();
		keyControl();
		Eatfood();
		Sleep(100);
	}
	return 0;
}